{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f98532b70c785864e076cd4001ede5fefbcf55958e85821ed45b12accd910cc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1065667",
    "logsBloom": "0x
    "blockHash": "0xabb2e18cb9370e397a9ae7047b42017a9a61d5854bca7b785eafed2903432bce",
    "transactionHash": "0x0f98532b70c785864e076cd4001ede5fefbcf55958e85821ed45b12accd910cc",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1065667",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "cab3a8ae4f542c69b4689c2e2ca56dd1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"EngrSaeedWazir\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"Fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get Fund From Users\\n//WithDraw Funds\\n//Set A minimum Funding Value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\n//Prama\\npragma solidity ^0.8.17; // You can use other version See Slides for more info\\n//Imports\\n\\n/* interface AggregatorV3Interface {                     // We are importing it by Link because this a an                                                   //\\n  function decimals() external view returns (uint8);    // an ugly practice\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n    } */\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//error code\\n\\n// Constant, immutable\\n//\\t841840 gas\\n//  822310 gas\\n//-------------\\n//error FundMe__Noti_owner();// for revert use which is ga efficient\\n\\n/**@title A sample Funding Contract\\n * @author EngrSaeedWazir\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    //type Declaration //styeguide\\n    using PriceConverter for uint256;\\n    //uint256 public number; // For Now Commented it\\n\\n    //\\t21371 gas, for constant in view function\\n    //23,400 gas , for non-constant in view function\\n\\n    //State variables //styeguide\\n    mapping(address => uint256) private s_addressToAmountFunded; // map to specific address\\n    address[] private s_funders; // All the addreses who funded\\n\\n    address private immutable i_owner; //a global variable\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //1*10**18\\n\\n    // 21508 gas, immutable\\n    //23644 gas, without immutable\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyowner() {\\n        require(msg.sender == i_owner, \\\"Sender is not i_owner\\\"); //Noti_owner());\\n        //if(msg.sender !=i_owner){revert FundMe__Noti_owner();}\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function Fund() public payable {\\n        //Want to be able to Send a minimum fund amount in USD\\n        //1.  How do we send ETH to this conaract\\n        //number=5;  // For Now Commented it\\n        //require(msg.value > MINIMUM_USD, \\\"Donot Send Enough\\\");\\n\\n        //require(getConversionRate(msg.value) >= MINIMUM_USD, \\\"Donot Send Enough\\\"); //1e18 == 1*10**18= 1000000000000000000\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        ); //value paramter pass to function in Library\\n\\n        //a Ton of computation\\n        // What is Reverting\\n        //Undo any action before, and send ramaining gas back\\n        s_funders.push(msg.sender); // sender address\\n        s_addressToAmountFunded[msg.sender] += msg.value; // how much a specific adress send\\n    }\\n\\n    function Withdraw() public onlyowner {\\n        //require(msg.sender == i_owner, \\\"Sender is not i_owner\\\");/*May be other function in this contract need\\n        // this rquire statement therefore our focus is modifier.                                                        //\\n        /*starting index, ending index, step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset the address\\n        s_funders = new address[](0);\\n        // actually withdraw the fund\\n\\n        /*\\n      // transfer\\n      payable(msg.sender).transfer(address(this).balance);   // Call is used today so comment the other\\n      // send\\n      bool sendSuccess=payable(msg.sender).send(address(this).balance);\\n      require(sendSuccess, \\\"Send failed\\\"); */\\n\\n        //call\\n        (bool callSuccess /* byte memory storedata */, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Send failed\\\");\\n\\n        //msg.sender=address\\n        //payable(msg.sender)=payable address\\n        //payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function cheaperWithdraw() public onlyowner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    // what happen if some one send eth without calling the fund function\\n    // recieve()\\n    //fallback()\\n    // receive() external payable {\\n    //     Fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     Fund();\\n    // }\\n}\\n\",\"keccak256\":\"0x18ed2054de097f92dab8fb1b993917b617ad46f955fe2299ccf17addc86985e4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17; // You can use other version See Slides for more info\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\n        // ETH in term of USD\\n        // 1,218.00000000\\n        return uint256(price * 10000000000); //1**10=10000000000\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //// 1 * 10 ** 18 == 1000000000000000000=1e18 //36 zeros but we want 18 zeros\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xe540403a29b1834d5f91930c87e827c62db72244d39a4eca635092d8ff395b4b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013683803806200136883398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516111e862000180600039600081816102cb0152818161065d015281816106ad01526108ac01526111e86000f3fe6080604052600436106100865760003560e01c80636ce1417e116100595780636ce1417e14610135578063893d20e81461013f5780639e87a5cd1461016a578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c857806357ea89b6146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b61565b6101e9565b6040516100bf9190610ba7565b60405180910390f35b3480156100d457600080fd5b506100dd610231565b6040516100ea9190610ba7565b60405180910390f35b3480156100ff57600080fd5b506101086102c9565b005b34801561011657600080fd5b5061011f610512565b60405161012c9190610ba7565b60405180910390f35b61013d61051f565b005b34801561014b57600080fd5b50610154610659565b6040516101619190610bd1565b60405180910390f35b34801561017657600080fd5b5061017f610681565b60405161018c9190610c4b565b60405180910390f35b3480156101a157600080fd5b506101aa6106ab565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610c92565b610942565b6040516101e09190610bd1565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610cd4565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610d5e565b60405180910390fd5b60005b6001805490508110156104025760006001828154811061037d5761037c610d7e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa90610ddc565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610e24565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060019080519060200190610462929190610a57565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610e84565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ee5565b60405180910390fd5b50565b6802b5e3af16b188000081565b6802b5e3af16b188000061055e600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098a90919063ffffffff16565b101561059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610f51565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106509190610f71565b92505081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090610d5e565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610773575b5050505050905060005b81518110156108475760008282815181106107e5576107e4610d7e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083f90610ddc565b9150506107c7565b50600067ffffffffffffffff81111561086357610862610e24565b5b6040519080825280602002602001820160405280156108915781602001602082028036833780820191505090505b50600190805190602001906108a7929190610a57565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ee90610e84565b60006040518083038185875af1925050503d806000811461092b576040519150601f19603f3d011682016040523d82523d6000602084013e610930565b606091505b505090508061093e57600080fd5b5050565b60006001828154811061095857610957610d7e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610996836109c6565b90506000670de0b6b3a764000085836109af9190610fa5565b6109b99190611016565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3891906110bf565b5050509150506402540be40081610a4f919061113a565b915050919050565b828054828255906000526020600020908101928215610ad0579160200282015b82811115610acf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a77565b5b509050610add9190610ae1565b5090565b5b80821115610afa576000816000905550600101610ae2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2e82610b03565b9050919050565b610b3e81610b23565b8114610b4957600080fd5b50565b600081359050610b5b81610b35565b92915050565b600060208284031215610b7757610b76610afe565b5b6000610b8584828501610b4c565b91505092915050565b6000819050919050565b610ba181610b8e565b82525050565b6000602082019050610bbc6000830184610b98565b92915050565b610bcb81610b23565b82525050565b6000602082019050610be66000830184610bc2565b92915050565b6000819050919050565b6000610c11610c0c610c0784610b03565b610bec565b610b03565b9050919050565b6000610c2382610bf6565b9050919050565b6000610c3582610c18565b9050919050565b610c4581610c2a565b82525050565b6000602082019050610c606000830184610c3c565b92915050565b610c6f81610b8e565b8114610c7a57600080fd5b50565b600081359050610c8c81610c66565b92915050565b600060208284031215610ca857610ca7610afe565b5b6000610cb684828501610c7d565b91505092915050565b600081519050610cce81610c66565b92915050565b600060208284031215610cea57610ce9610afe565b5b6000610cf884828501610cbf565b91505092915050565b600082825260208201905092915050565b7f53656e646572206973206e6f7420695f6f776e65720000000000000000000000600082015250565b6000610d48601583610d01565b9150610d5382610d12565b602082019050919050565b60006020820190508181036000830152610d7781610d3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610de782610b8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e1957610e18610dad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e6e600083610e53565b9150610e7982610e5e565b600082019050919050565b6000610e8f82610e61565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ecf600b83610d01565b9150610eda82610e99565b602082019050919050565b60006020820190508181036000830152610efe81610ec2565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f3b601b83610d01565b9150610f4682610f05565b602082019050919050565b60006020820190508181036000830152610f6a81610f2e565b9050919050565b6000610f7c82610b8e565b9150610f8783610b8e565b9250828201905080821115610f9f57610f9e610dad565b5b92915050565b6000610fb082610b8e565b9150610fbb83610b8e565b9250828202610fc981610b8e565b91508282048414831517610fe057610fdf610dad565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102182610b8e565b915061102c83610b8e565b92508261103c5761103b610fe7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106681611047565b811461107157600080fd5b50565b6000815190506110838161105d565b92915050565b6000819050919050565b61109c81611089565b81146110a757600080fd5b50565b6000815190506110b981611093565b92915050565b600080600080600060a086880312156110db576110da610afe565b5b60006110e988828901611074565b95505060206110fa888289016110aa565b945050604061110b88828901610cbf565b935050606061111c88828901610cbf565b925050608061112d88828901611074565b9150509295509295909350565b600061114582611089565b915061115083611089565b925082820261115e81611089565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561119657611195610dad565b5b82820584148315176111ab576111aa610dad565b5b509291505056fea2646970667358221220bb3d4d7f5cf67ea251d7fb3fc9440d4d8acfebf2f6648be06e8c1adcdfaf183b64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80636ce1417e116100595780636ce1417e14610135578063893d20e81461013f5780639e87a5cd1461016a578063be2693f014610195578063d7b4750c146101ac57610086565b80630343fb251461008b5780630d8e6e2c146100c857806357ea89b6146100f35780636b69a5921461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b61565b6101e9565b6040516100bf9190610ba7565b60405180910390f35b3480156100d457600080fd5b506100dd610231565b6040516100ea9190610ba7565b60405180910390f35b3480156100ff57600080fd5b506101086102c9565b005b34801561011657600080fd5b5061011f610512565b60405161012c9190610ba7565b60405180910390f35b61013d61051f565b005b34801561014b57600080fd5b50610154610659565b6040516101619190610bd1565b60405180910390f35b34801561017657600080fd5b5061017f610681565b60405161018c9190610c4b565b60405180910390f35b3480156101a157600080fd5b506101aa6106ab565b005b3480156101b857600080fd5b506101d360048036038101906101ce9190610c92565b610942565b6040516101e09190610bd1565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610cd4565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034e90610d5e565b60405180910390fd5b60005b6001805490508110156104025760006001828154811061037d5761037c610d7e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa90610ddc565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610e24565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060019080519060200190610462929190610a57565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610e84565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ee5565b60405180910390fd5b50565b6802b5e3af16b188000081565b6802b5e3af16b188000061055e600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098a90919063ffffffff16565b101561059f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059690610f51565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106509190610f71565b92505081905550565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090610d5e565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610773575b5050505050905060005b81518110156108475760008282815181106107e5576107e4610d7e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083f90610ddc565b9150506107c7565b50600067ffffffffffffffff81111561086357610862610e24565b5b6040519080825280602002602001820160405280156108915781602001602082028036833780820191505090505b50600190805190602001906108a7929190610a57565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108ee90610e84565b60006040518083038185875af1925050503d806000811461092b576040519150601f19603f3d011682016040523d82523d6000602084013e610930565b606091505b505090508061093e57600080fd5b5050565b60006001828154811061095857610957610d7e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610996836109c6565b90506000670de0b6b3a764000085836109af9190610fa5565b6109b99190611016565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3891906110bf565b5050509150506402540be40081610a4f919061113a565b915050919050565b828054828255906000526020600020908101928215610ad0579160200282015b82811115610acf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a77565b5b509050610add9190610ae1565b5090565b5b80821115610afa576000816000905550600101610ae2565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2e82610b03565b9050919050565b610b3e81610b23565b8114610b4957600080fd5b50565b600081359050610b5b81610b35565b92915050565b600060208284031215610b7757610b76610afe565b5b6000610b8584828501610b4c565b91505092915050565b6000819050919050565b610ba181610b8e565b82525050565b6000602082019050610bbc6000830184610b98565b92915050565b610bcb81610b23565b82525050565b6000602082019050610be66000830184610bc2565b92915050565b6000819050919050565b6000610c11610c0c610c0784610b03565b610bec565b610b03565b9050919050565b6000610c2382610bf6565b9050919050565b6000610c3582610c18565b9050919050565b610c4581610c2a565b82525050565b6000602082019050610c606000830184610c3c565b92915050565b610c6f81610b8e565b8114610c7a57600080fd5b50565b600081359050610c8c81610c66565b92915050565b600060208284031215610ca857610ca7610afe565b5b6000610cb684828501610c7d565b91505092915050565b600081519050610cce81610c66565b92915050565b600060208284031215610cea57610ce9610afe565b5b6000610cf884828501610cbf565b91505092915050565b600082825260208201905092915050565b7f53656e646572206973206e6f7420695f6f776e65720000000000000000000000600082015250565b6000610d48601583610d01565b9150610d5382610d12565b602082019050919050565b60006020820190508181036000830152610d7781610d3b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610de782610b8e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e1957610e18610dad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e6e600083610e53565b9150610e7982610e5e565b600082019050919050565b6000610e8f82610e61565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ecf600b83610d01565b9150610eda82610e99565b602082019050919050565b60006020820190508181036000830152610efe81610ec2565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f3b601b83610d01565b9150610f4682610f05565b602082019050919050565b60006020820190508181036000830152610f6a81610f2e565b9050919050565b6000610f7c82610b8e565b9150610f8783610b8e565b9250828201905080821115610f9f57610f9e610dad565b5b92915050565b6000610fb082610b8e565b9150610fbb83610b8e565b9250828202610fc981610b8e565b91508282048414831517610fe057610fdf610dad565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061102182610b8e565b915061102c83610b8e565b92508261103c5761103b610fe7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106681611047565b811461107157600080fd5b50565b6000815190506110838161105d565b92915050565b6000819050919050565b61109c81611089565b81146110a757600080fd5b50565b6000815190506110b981611093565b92915050565b600080600080600060a086880312156110db576110da610afe565b5b60006110e988828901611074565b95505060206110fa888289016110aa565b945050604061110b88828901610cbf565b935050606061111c88828901610cbf565b925050608061112d88828901611074565b9150509295509295909350565b600061114582611089565b915061115083611089565b925082820261115e81611089565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561119657611195610dad565b5b82820584148315176111ab576111aa610dad565b5b509291505056fea2646970667358221220bb3d4d7f5cf67ea251d7fb3fc9440d4d8acfebf2f6648be06e8c1adcdfaf183b64736f6c63430008110033",
  "devdoc": {
    "author": "EngrSaeedWazir",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "Fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}