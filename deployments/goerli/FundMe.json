{
  "address": "0x395bDc9E89510C7E174a3DD386cE5Ad571F0745E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "Fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFounded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b9316065c53480c52832933bba0c30e5acf47b81daa4d60fd0949b1efab0edf",
  "receipt": {
    "to": null,
    "from": "0x0C484385B5087Bb0237828C594643d0552990F28",
    "contractAddress": "0x395bDc9E89510C7E174a3DD386cE5Ad571F0745E",
    "transactionIndex": 51,
    "gasUsed": "852999",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x523fd5d2aef83b99810efc5c90a35dcda4a75d01d94953a49397d103b3a5540d",
    "transactionHash": "0x9b9316065c53480c52832933bba0c30e5acf47b81daa4d60fd0949b1efab0edf",
    "logs": [],
    "blockNumber": 8322522,
    "cumulativeGasUsed": "16551249",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "a586b4eb4a22b8693afdef8b299778f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFounded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get Fund From Users\\n//WithDraw Funds\\n//Set A minimum Funding Value in USD\\n\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17; // You can use other version See Slides for more info\\n\\n/* interface AggregatorV3Interface {                     // We are importing it by Link because this a an                                                   //\\n  function decimals() external view returns (uint8);    // an ugly practice\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n    } */\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Constant, immutable\\n//\\t841840 gas\\n//  822310 gas\\n//-------------\\n//error NotOwner();// for revert use which is ga efficient\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n    //uint256 public number; // For Now Commented it\\n    uint256 public constant minimumUsd = 50 * 1e18; //1*10**18\\n    //\\t21371 gas, for constant in view function\\n    //23,400 gas , for non-constant in view function\\n\\n    address[] public funders; // All the addreses who funded\\n    mapping(address => uint256) public addressToAmountFounded; // map to specific address\\n\\n    address public immutable owner; //a global variable\\n\\n    // 21508 gas, immutable\\n    //23644 gas, without immutable\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function Fund() public payable {\\n        //Want to be able to Send a minimum fund amount in USD\\n        //1.  How do we send ETH to this conaract\\n        //number=5;  // For Now Commented it\\n        //require(msg.value > minimumUsd, \\\"Donot Send Enough\\\");\\n\\n        //require(getConversionRate(msg.value) >= minimumUsd, \\\"Donot Send Enough\\\"); //1e18 == 1*10**18= 1000000000000000000\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\\n            \\\"You need to spend more ETH!\\\"\\n        ); //value paramter pass to function in Library\\n\\n        //a Ton of computation\\n        // What is Reverting\\n        //Undo any action before, and send ramaining gas back\\n        funders.push(msg.sender); // sender address\\n        addressToAmountFounded[msg.sender] += msg.value; // how much a specific adress send\\n    }\\n\\n    function Withdraw() public onlyOwner {\\n        //require(msg.sender == owner, \\\"Sender is not owner\\\");/*May be other function in this contract need\\n        // this rquire statement therefore our focus is modifier.                                                        //\\n        /*starting index, ending index, step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFounded[funder] = 0;\\n        }\\n        //reset the address\\n        funders = new address[](0);\\n        // actually withdraw the fund\\n\\n        /*\\n      // transfer\\n      payable(msg.sender).transfer(address(this).balance);   // Call is used today so comment the other\\n      // send\\n      bool sendSuccess=payable(msg.sender).send(address(this).balance);\\n      require(sendSuccess, \\\"Send failed\\\"); */\\n\\n        //call\\n        (bool callSuccess /* byte memory storedata */, ) = payable(msg.sender)\\n            .call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Send failed\\\");\\n\\n        //msg.sender=address\\n        //payable(msg.sender)=payable address\\n        //payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender is not owner\\\"); //NotOwner());\\n        //if(msg.sender !=owner){revert NotOwner();}\\n        _;\\n    }\\n\\n    // what happen if some one send eth without calling the fund function\\n    // recieve()\\n    //fallback()\\n    receive() external payable {\\n        Fund();\\n    }\\n\\n    fallback() external payable {\\n        Fund();\\n    }\\n}\\n\",\"keccak256\":\"0x5a98ae872771ebc36f793e6d0c7814142602003c2be51b17e76aeb8dcf4ee5dc\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17; // You can use other version See Slides for more info\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\n        // ETH in term of USD\\n        // 1,218.00000000\\n        return uint256(price * 10000000000); //1**10=10000000000\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000; //// 1 * 10 ** 18 == 1000000000000000000=1e18 //36 zeros but we want 18 zeros\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xe540403a29b1834d5f91930c87e827c62db72244d39a4eca635092d8ff395b4b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f6b380380610f6b83398181016040528101906100329190610110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610e0c61015f600039600081816102f3015261057a0152610e0c6000f3fe6080604052600436106100745760003560e01c80636ce1417e1161004e5780636ce1417e1461010c578063741bef1a146101165780638da5cb5b14610141578063dc0d3dff1461016c57610083565b8063098de8201461008d57806357ea89b6146100b857806369d1c5af146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b6040516100af9190610768565b60405180910390f35b3480156100c457600080fd5b506100cd6102f1565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107e6565b61053a565b6040516101039190610768565b60405180910390f35b6101146101a9565b005b34801561012257600080fd5b5061012b610552565b6040516101389190610872565b60405180910390f35b34801561014d57600080fd5b50610156610578565b604051610163919061089c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e3565b61059c565b6040516101a0919061089c565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105db90919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061096d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109bc565b92505081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690610a3c565b60405180910390fd5b60005b60008054905081101561042a5760008082815481106103a4576103a3610a5c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042290610a8b565b915050610382565b50600067ffffffffffffffff81111561044657610445610ad3565b5b6040519080825280602002602001820160405280156104745781602001602082028036833780820191505090505b506000908051906020019061048a9291906106a8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104b190610b33565b60006040518083038185875af1925050503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b5050905080610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90610b94565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106105ac57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e783610617565b90506000670de0b6b3a764000085836106009190610bb4565b61060a9190610c25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610ce3565b5050509150506402540be400816106a09190610d5e565b915050919050565b828054828255906000526020600020908101928215610721579160200282015b828111156107205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c8565b5b50905061072e9190610732565b5090565b5b8082111561074b576000816000905550600101610733565b5090565b6000819050919050565b6107628161074f565b82525050565b600060208201905061077d6000830184610759565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b382610788565b9050919050565b6107c3816107a8565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb610783565b5b600061080a848285016107d1565b91505092915050565b6000819050919050565b600061083861083361082e84610788565b610813565b610788565b9050919050565b600061084a8261081d565b9050919050565b600061085c8261083f565b9050919050565b61086c81610851565b82525050565b60006020820190506108876000830184610863565b92915050565b610896816107a8565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6108c08161074f565b81146108cb57600080fd5b50565b6000813590506108dd816108b7565b92915050565b6000602082840312156108f9576108f8610783565b5b6000610907848285016108ce565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610957601b83610910565b915061096282610921565b602082019050919050565b600060208201905081810360008301526109868161094a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c78261074f565b91506109d28361074f565b92508282019050808211156109ea576109e961098d565b5b92915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610a26601383610910565b9150610a31826109f0565b602082019050919050565b60006020820190508181036000830152610a5581610a19565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a968261074f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ac857610ac761098d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b1d600083610b02565b9150610b2882610b0d565b600082019050919050565b6000610b3e82610b10565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b7e600b83610910565b9150610b8982610b48565b602082019050919050565b60006020820190508181036000830152610bad81610b71565b9050919050565b6000610bbf8261074f565b9150610bca8361074f565b9250828202610bd88161074f565b91508282048414831517610bef57610bee61098d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c308261074f565b9150610c3b8361074f565b925082610c4b57610c4a610bf6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c7581610c56565b8114610c8057600080fd5b50565b600081519050610c9281610c6c565b92915050565b6000819050919050565b610cab81610c98565b8114610cb657600080fd5b50565b600081519050610cc881610ca2565b92915050565b600081519050610cdd816108b7565b92915050565b600080600080600060a08688031215610cff57610cfe610783565b5b6000610d0d88828901610c83565b9550506020610d1e88828901610cb9565b9450506040610d2f88828901610cce565b9350506060610d4088828901610cce565b9250506080610d5188828901610c83565b9150509295509295909350565b6000610d6982610c98565b9150610d7483610c98565b9250828202610d8281610c98565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dba57610db961098d565b5b8282058414831517610dcf57610dce61098d565b5b509291505056fea264697066735822122062e79fbd1777f57ddb7d354672c9bbe8880f3ecb9157956b0d702d7fbcde03ef64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80636ce1417e1161004e5780636ce1417e1461010c578063741bef1a146101165780638da5cb5b14610141578063dc0d3dff1461016c57610083565b8063098de8201461008d57806357ea89b6146100b857806369d1c5af146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b6040516100af9190610768565b60405180910390f35b3480156100c457600080fd5b506100cd6102f1565b005b3480156100db57600080fd5b506100f660048036038101906100f191906107e6565b61053a565b6040516101039190610768565b60405180910390f35b6101146101a9565b005b34801561012257600080fd5b5061012b610552565b6040516101389190610872565b60405180910390f35b34801561014d57600080fd5b50610156610578565b604051610163919061089c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108e3565b61059c565b6040516101a0919061089c565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105db90919063ffffffff16565b1015610229576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102209061096d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109bc565b92505081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690610a3c565b60405180910390fd5b60005b60008054905081101561042a5760008082815481106103a4576103a3610a5c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042290610a8b565b915050610382565b50600067ffffffffffffffff81111561044657610445610ad3565b5b6040519080825280602002602001820160405280156104745781602001602082028036833780820191505090505b506000908051906020019061048a9291906106a8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104b190610b33565b60006040518083038185875af1925050503d80600081146104ee576040519150601f19603f3d011682016040523d82523d6000602084013e6104f3565b606091505b5050905080610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90610b94565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815481106105ac57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105e783610617565b90506000670de0b6b3a764000085836106009190610bb4565b61060a9190610c25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610ce3565b5050509150506402540be400816106a09190610d5e565b915050919050565b828054828255906000526020600020908101928215610721579160200282015b828111156107205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c8565b5b50905061072e9190610732565b5090565b5b8082111561074b576000816000905550600101610733565b5090565b6000819050919050565b6107628161074f565b82525050565b600060208201905061077d6000830184610759565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107b382610788565b9050919050565b6107c3816107a8565b81146107ce57600080fd5b50565b6000813590506107e0816107ba565b92915050565b6000602082840312156107fc576107fb610783565b5b600061080a848285016107d1565b91505092915050565b6000819050919050565b600061083861083361082e84610788565b610813565b610788565b9050919050565b600061084a8261081d565b9050919050565b600061085c8261083f565b9050919050565b61086c81610851565b82525050565b60006020820190506108876000830184610863565b92915050565b610896816107a8565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6108c08161074f565b81146108cb57600080fd5b50565b6000813590506108dd816108b7565b92915050565b6000602082840312156108f9576108f8610783565b5b6000610907848285016108ce565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610957601b83610910565b915061096282610921565b602082019050919050565b600060208201905081810360008301526109868161094a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c78261074f565b91506109d28361074f565b92508282019050808211156109ea576109e961098d565b5b92915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610a26601383610910565b9150610a31826109f0565b602082019050919050565b60006020820190508181036000830152610a5581610a19565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a968261074f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ac857610ac761098d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b1d600083610b02565b9150610b2882610b0d565b600082019050919050565b6000610b3e82610b10565b9150819050919050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b7e600b83610910565b9150610b8982610b48565b602082019050919050565b60006020820190508181036000830152610bad81610b71565b9050919050565b6000610bbf8261074f565b9150610bca8361074f565b9250828202610bd88161074f565b91508282048414831517610bef57610bee61098d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c308261074f565b9150610c3b8361074f565b925082610c4b57610c4a610bf6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c7581610c56565b8114610c8057600080fd5b50565b600081519050610c9281610c6c565b92915050565b6000819050919050565b610cab81610c98565b8114610cb657600080fd5b50565b600081519050610cc881610ca2565b92915050565b600081519050610cdd816108b7565b92915050565b600080600080600060a08688031215610cff57610cfe610783565b5b6000610d0d88828901610c83565b9550506020610d1e88828901610cb9565b9450506040610d2f88828901610cce565b9350506060610d4088828901610cce565b9250506080610d5188828901610c83565b9150509295509295909350565b6000610d6982610c98565b9150610d7483610c98565b9250828202610d8281610c98565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610dba57610db961098d565b5b8282058414831517610dcf57610dce61098d565b5b509291505056fea264697066735822122062e79fbd1777f57ddb7d354672c9bbe8880f3ecb9157956b0d702d7fbcde03ef64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFounded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}